/* automatically generated by rust-bindgen 0.54.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const xBitmapWordLog2: u32 = 5;
pub const xNbIrqs: u32 = 96;
pub const xNbCpus: u32 = 2;
pub const xSourcePort: u32 = 0;
pub const xDestinationPort: u32 = 1;
pub const LOG2_WORD_SZ: u32 = 5;
pub const MAX_TIME_SPAN: u32 = 4294967295;
pub const xMaxStringLength: u32 = 16;
pub const xInfiniteTimeValue: i32 = -1;
pub const xInvalidCpuId: i32 = -1;
pub const xNoError: u32 = 0;
pub const xNoAction: u32 = 1;
pub const xNotAvailable: u32 = 2;
pub const xInvalidParam: u32 = 3;
pub const xInvalidConfig: u32 = 4;
pub const xInvalidMode: u32 = 5;
pub const xInvalidId: u32 = 0;
pub const xNbVIrqs: u32 = 256;
pub const xVIrqSystemTimer: u32 = 196;
pub const xVIrqScheduleReleasePoint: u32 = 197;
pub const xVIrqExecutionTimer: u32 = 198;
pub const xVCpuReady: u32 = 0;
pub const xVCpuRunning: u32 = 1;
pub const xVCpuIdle: u32 = 2;
pub const xVCpuSuspended: u32 = 3;
pub const xVCpuWaiting: u32 = 4;
pub const xPartitionColdStart: u32 = 0;
pub const xPartitionWarmStart: u32 = 1;
pub const xPartitionNormalStart: u32 = 0;
pub const xPartitionColdRestart: u32 = 1;
pub const xPartitionWarmRestart: u32 = 2;
pub const xPartitionHmColdRestart: u32 = 3;
pub const xPartitionHmWarmRestart: u32 = 4;
pub const xInvalidMessage: u32 = 0;
pub const xValidMessage: u32 = 1;
pub const xScheduleInit: u32 = 0;
pub const xScheduleSynchronising: u32 = 1;
pub const xScheduleNormal: u32 = 2;
pub const xScheduleError: u32 = 3;
pub const xInvalidScheduleId: u32 = 4294967295;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type xalIrq_t = u32;
pub type xalExcpCtxt_t = xalExcpCtxt;
pub type xalCpuReg_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xalExcpCtxt {
    pub irqNr: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xalExcpCtxt() {
    assert_eq!(
        ::core::mem::size_of::<xalExcpCtxt>(),
        8usize,
        concat!("Size of: ", stringify!(xalExcpCtxt))
    );
    assert_eq!(
        ::core::mem::align_of::<xalExcpCtxt>(),
        4usize,
        concat!("Alignment of ", stringify!(xalExcpCtxt))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xalExcpCtxt>())).irqNr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xalExcpCtxt),
            "::",
            stringify!(irqNr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xalExcpCtxt>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xalExcpCtxt),
            "::",
            stringify!(flags)
        )
    );
}
pub type xalExcpHndl_t = ::core::option::Option<unsafe extern "C" fn(ctxt: *mut xalExcpCtxt_t)>;
extern "C" {
    pub fn XalInstallIrqHndl(irq: xalIrq_t, hndl: xalExcpHndl_t) -> bool;
}
pub type __gwchar_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: cty::c_long,
    pub rem: cty::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::core::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: cty::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: cty::c_int,
    ) -> uintmax_t;
}
pub type xMemAddr_t = u32;
pub type xMemAddrPtr_t = *mut cty::c_void;
pub type xIoPortAddr_t = u32;
pub type xIoPort_t = u32;
pub type xIrq_t = i32;
pub type xBitmapWord_t = u32;
pub type xBspCpuReg_t = u32;
pub type xVCpuSet_t = u32;
pub type xCpuSet_t = u32;
pub type xcfSlotId_t = u32;
pub type xPortDirection_t = u32;
pub type xF32_t = f32;
pub type xF64_t = f64;
pub type xWord_t = u32;
pub type xTime_t = i64;
pub type xTimeSpan_t = i32;
pub type xVCpu_t = u32;
pub type xCpu_t = u32;
pub type xAddr_t = isize;
pub type xSize_t = u32;
pub type xSSize_t = i32;
pub type xString_t = [cty::c_char; 16usize];
pub type xStringPtr_t = *mut cty::c_char;
pub type xRange_t = i32;
pub type xCpuId_t = u32;
pub type xReturnCode_t = u32;
pub type xReserved_t = [xMemAddr_t; 3usize];
pub type xVIrq_t = u32;
extern "C" {
    pub fn XMaskVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XUnmaskVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XIsVIrqPending(arg1: xVIrq_t, arg2: *mut bool) -> xReturnCode_t;
}
extern "C" {
    pub fn XClearPendingVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetVIrqIndex() -> xVIrq_t;
}
extern "C" {
    pub fn XGetVIrqTimeTag(arg1: xVIrq_t, arg2: *mut xTime_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XRaiseVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XRouteVIrq(arg1: xVIrq_t, arg2: xVCpuSet_t) -> xReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xPctVIrqCtrl_t {
    pub pending: [xBitmapWord_t; 8usize],
    pub mask: [xBitmapWord_t; 8usize],
}
#[test]
fn bindgen_test_layout_xPctVIrqCtrl_t() {
    assert_eq!(
        ::core::mem::size_of::<xPctVIrqCtrl_t>(),
        64usize,
        concat!("Size of: ", stringify!(xPctVIrqCtrl_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xPctVIrqCtrl_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xPctVIrqCtrl_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPctVIrqCtrl_t>())).pending as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPctVIrqCtrl_t),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPctVIrqCtrl_t>())).mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xPctVIrqCtrl_t),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSchedInfo_t {
    pub noSlot: u32,
    pub id: u32,
    pub slotDuration: u32,
}
#[test]
fn bindgen_test_layout_xSchedInfo_t() {
    assert_eq!(
        ::core::mem::size_of::<xSchedInfo_t>(),
        12usize,
        concat!("Size of: ", stringify!(xSchedInfo_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xSchedInfo_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xSchedInfo_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSchedInfo_t>())).noSlot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSchedInfo_t),
            "::",
            stringify!(noSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSchedInfo_t>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSchedInfo_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSchedInfo_t>())).slotDuration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSchedInfo_t),
            "::",
            stringify!(slotDuration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xPartitionControlTable_t {
    pub vIrqCtrl: xPctVIrqCtrl_t,
    pub schedInfo: xSchedInfo_t,
}
#[test]
fn bindgen_test_layout_xPartitionControlTable_t() {
    assert_eq!(
        ::core::mem::size_of::<xPartitionControlTable_t>(),
        76usize,
        concat!("Size of: ", stringify!(xPartitionControlTable_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xPartitionControlTable_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xPartitionControlTable_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionControlTable_t>())).vIrqCtrl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionControlTable_t),
            "::",
            stringify!(vIrqCtrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionControlTable_t>())).schedInfo as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionControlTable_t),
            "::",
            stringify!(schedInfo)
        )
    );
}
extern "C" {
    pub fn XGetPct() -> *mut xPartitionControlTable_t;
}
pub type xVCpuId_t = u32;
pub type xVCpuState_t = u32;
extern "C" {
    pub fn XWaitUntilNextScheduleSlot();
}
extern "C" {
    pub fn XGetMyVCpuId() -> xVCpuId_t;
}
extern "C" {
    pub fn XResetVCpu(arg1: xVCpuId_t, arg2: xMemAddr_t) -> xReturnCode_t;
}
extern "C" {
    pub fn xHaltVCpu(arg1: xVCpuId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSuspendVCpu(arg1: xVCpuId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XResumeVCpu(arg1: xVCpuId_t) -> xReturnCode_t;
}
pub type xPartitionRestartRange_t = i64;
pub type xPartitionId_t = u32;
pub type xPartitionResetMode_t = i32;
pub type xPartitionStartCondition_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xVCpuSchedStatus_t {
    pub cSlotId: xcfSlotId_t,
    pub cSlotStart: xTime_t,
    pub cSlotDuration: xTime_t,
    pub cpuId: xCpuId_t,
}
#[test]
fn bindgen_test_layout_xVCpuSchedStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xVCpuSchedStatus_t>(),
        32usize,
        concat!("Size of: ", stringify!(xVCpuSchedStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xVCpuSchedStatus_t>(),
        8usize,
        concat!("Alignment of ", stringify!(xVCpuSchedStatus_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cSlotId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cSlotId)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cSlotStart as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cSlotStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cSlotDuration as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cSlotDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cpuId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cpuId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xPartitionStatus_t {
    pub startCondition: xPartitionStartCondition_t,
    pub nbRestarts: xPartitionRestartRange_t,
    pub vCpuState: xVCpuState_t,
    pub vCpuSchedStatus: xVCpuSchedStatus_t,
    pub vCpusState: [xVCpuState_t; 2usize],
    pub vCpusSchedStatus: [xVCpuSchedStatus_t; 2usize],
}
#[test]
fn bindgen_test_layout_xPartitionStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xPartitionStatus_t>(),
        128usize,
        concat!("Size of: ", stringify!(xPartitionStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xPartitionStatus_t>(),
        8usize,
        concat!("Alignment of ", stringify!(xPartitionStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionStatus_t>())).startCondition as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(startCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPartitionStatus_t>())).nbRestarts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(nbRestarts)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpuState as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpuState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpuSchedStatus as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpuSchedStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpusState as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpusState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpusSchedStatus as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpusSchedStatus)
        )
    );
}
extern "C" {
    pub fn XGetMyPartitionId(arg1: *mut xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetPartitionId(arg1: xStringPtr_t, arg2: *mut xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XResetPartition(
        arg1: xPartitionId_t,
        arg2: xMemAddr_t,
        arg3: xPartitionResetMode_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XHaltPartition(arg1: xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetPartitionStatus(
        arg1: xPartitionId_t,
        arg2: *mut xPartitionStatus_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XSuspendPartition(arg1: xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XResumePartition(arg1: xPartitionId_t) -> xReturnCode_t;
}
pub type xQueuingPortId_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xQueuingPortStatus_t {
    pub nbMessages: xRange_t,
}
#[test]
fn bindgen_test_layout_xQueuingPortStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xQueuingPortStatus_t>(),
        4usize,
        concat!("Size of: ", stringify!(xQueuingPortStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xQueuingPortStatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueuingPortStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xQueuingPortStatus_t>())).nbMessages as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueuingPortStatus_t),
            "::",
            stringify!(nbMessages)
        )
    );
}
extern "C" {
    pub fn XCreateQueuingPort(
        arg1: xStringPtr_t,
        arg2: xSize_t,
        arg3: xRange_t,
        arg4: xPortDirection_t,
        arg5: *mut xQueuingPortId_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XReceiveQueuingMessage(
        arg1: xQueuingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: *mut xSize_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XSendQueuingMessage(
        arg1: xQueuingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: xSize_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetQueuingPortId(arg1: xStringPtr_t, arg2: *mut xQueuingPortId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetQueuingPortStatus(
        arg1: xQueuingPortId_t,
        arg2: *mut xQueuingPortStatus_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XClearQueuingPort(arg1: xQueuingPortId_t) -> xReturnCode_t;
}
pub type xSamplingPortId_t = u32;
pub type xValidity_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSamplingPortStatus_t {
    pub refreshPeriod: xTime_t,
    pub lastMessageTimestamp: xTime_t,
    pub lastMessageSize: xSize_t,
    pub lastMessageValidity: xValidity_t,
}
#[test]
fn bindgen_test_layout_xSamplingPortStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xSamplingPortStatus_t>(),
        24usize,
        concat!("Size of: ", stringify!(xSamplingPortStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xSamplingPortStatus_t>(),
        8usize,
        concat!("Alignment of ", stringify!(xSamplingPortStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).refreshPeriod as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(refreshPeriod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).lastMessageTimestamp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(lastMessageTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).lastMessageSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(lastMessageSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).lastMessageValidity as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(lastMessageValidity)
        )
    );
}
extern "C" {
    pub fn XCreateSamplingPort(
        arg1: xStringPtr_t,
        arg2: xSize_t,
        arg3: xPortDirection_t,
        arg4: xTime_t,
        arg5: *mut xSamplingPortId_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XWriteSamplingMessage(
        arg1: xSamplingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: xSize_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XReadSamplingMessage(
        arg1: xSamplingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: *mut xSize_t,
        arg4: *mut xValidity_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetSamplingPortId(arg1: xStringPtr_t, arg2: *mut xSamplingPortId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetSamplingPortStatus(
        arg1: xSamplingPortId_t,
        arg2: *mut xSamplingPortStatus_t,
    ) -> xReturnCode_t;
}
pub type xScheduleId_t = u32;
pub type xScheduleState_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xScheduleStatus_t {
    pub timeOfLastScheduleSwitch: xTime_t,
    pub previousSchedule: xScheduleId_t,
    pub currentSchedule: xScheduleId_t,
    pub nextSchedule: xScheduleId_t,
    pub state: xScheduleState_t,
}
#[test]
fn bindgen_test_layout_xScheduleStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xScheduleStatus_t>(),
        24usize,
        concat!("Size of: ", stringify!(xScheduleStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xScheduleStatus_t>(),
        8usize,
        concat!("Alignment of ", stringify!(xScheduleStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xScheduleStatus_t>())).timeOfLastScheduleSwitch as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(timeOfLastScheduleSwitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xScheduleStatus_t>())).previousSchedule as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(previousSchedule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xScheduleStatus_t>())).currentSchedule as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(currentSchedule)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xScheduleStatus_t>())).nextSchedule as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(nextSchedule)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xScheduleStatus_t>())).state as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    pub fn XGetScheduleId(
        scheduleName: xStringPtr_t,
        scheduleId: *mut xScheduleId_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetScheduleStatus(status: *mut xScheduleStatus_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetSchedule(scheduleId: xScheduleId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetScheduleNow(scheduleId: xScheduleId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetSystemTime(systemTime: *mut xTime_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetExecutionTime(executionTime: *mut xTime_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetSystemTimer(value: xTime_t, period: xTimeSpan_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetExecutionTimer(value: xTime_t, period: xTimeSpan_t) -> xReturnCode_t;
}
