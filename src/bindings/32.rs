/* automatically generated by rust-bindgen 0.54.1 */

pub const xBitmapWordLog2: u32 = 5;
pub const xNbIrqs: u32 = 96;
pub const xNbCpus: u32 = 2;
pub const xSourcePort: u32 = 0;
pub const xDestinationPort: u32 = 1;
pub const xMaxStringLength: u32 = 16;
pub const xInfiniteTimeValue: i32 = -1;
pub const xInvalidCpuId: i32 = -1;
pub const xNoError: u32 = 0;
pub const xNoAction: u32 = 1;
pub const xNotAvailable: u32 = 2;
pub const xInvalidParam: u32 = 3;
pub const xInvalidConfig: u32 = 4;
pub const xInvalidMode: u32 = 5;
pub const xInvalidId: u32 = 0;
pub const xNbVIrqs: u32 = 256;
pub const xVIrqSystemTimer: u32 = 196;
pub const xVIrqScheduleReleasePoint: u32 = 197;
pub const xVIrqExecutionTimer: u32 = 198;
pub const xVCpuReady: u32 = 0;
pub const xVCpuRunning: u32 = 1;
pub const xVCpuIdle: u32 = 2;
pub const xVCpuSuspended: u32 = 3;
pub const xVCpuWaiting: u32 = 4;
pub const xPartitionColdStart: u32 = 0;
pub const xPartitionWarmStart: u32 = 1;
pub const xPartitionNormalStart: u32 = 0;
pub const xPartitionColdRestart: u32 = 1;
pub const xPartitionWarmRestart: u32 = 2;
pub const xPartitionHmColdRestart: u32 = 3;
pub const xPartitionHmWarmRestart: u32 = 4;
pub const xInvalidMessage: u32 = 0;
pub const xValidMessage: u32 = 1;
pub const xScheduleInit: u32 = 0;
pub const xScheduleSynchronising: u32 = 1;
pub const xScheduleNormal: u32 = 2;
pub const xScheduleError: u32 = 3;
pub const xInvalidScheduleId: u32 = 4294967295;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_longlong;
pub type xalIrq_t = u32;
pub type xalExcpCtxt_t = xalExcpCtxt;
pub type xalCpuReg_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xalExcpCtxt {
    pub irqNr: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xalExcpCtxt() {
    assert_eq!(
        ::core::mem::size_of::<xalExcpCtxt>(),
        8usize,
        concat!("Size of: ", stringify!(xalExcpCtxt))
    );
    assert_eq!(
        ::core::mem::align_of::<xalExcpCtxt>(),
        4usize,
        concat!("Alignment of ", stringify!(xalExcpCtxt))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xalExcpCtxt>())).irqNr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xalExcpCtxt),
            "::",
            stringify!(irqNr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xalExcpCtxt>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xalExcpCtxt),
            "::",
            stringify!(flags)
        )
    );
}
pub type xalExcpHndl_t = ::core::option::Option<unsafe extern "C" fn(ctxt: *mut xalExcpCtxt_t)>;
extern "C" {
    pub fn XalInstallIrqHndl(irq: xalIrq_t, hndl: xalExcpHndl_t) -> bool;
}
pub type xMemAddr_t = u32;
pub type xMemAddrPtr_t = *mut cty::c_void;
pub type xIoPortAddr_t = u32;
pub type xIoPort_t = u32;
pub type xIrq_t = i32;
pub type xBitmapWord_t = u32;
pub type xBspCpuReg_t = u32;
pub type xVCpuSet_t = u32;
pub type xCpuSet_t = u32;
pub type xcfSlotId_t = u32;
pub type xPortDirection_t = u32;
pub type xF32_t = f32;
pub type xF64_t = f64;
pub type xWord_t = u32;
pub type xTime_t = i64;
pub type xTimeSpan_t = i32;
pub type xVCpu_t = u32;
pub type xCpu_t = u32;
pub type xAddr_t = isize;
pub type xSize_t = u32;
pub type xSSize_t = i32;
pub type xString_t = [cty::c_char; 16usize];
pub type xStringPtr_t = *mut cty::c_char;
pub type xRange_t = i32;
pub type xCpuId_t = u32;
pub type xReturnCode_t = u32;
pub type xReserved_t = [xMemAddr_t; 3usize];
pub type xVIrq_t = u32;
extern "C" {
    pub fn XMaskVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XUnmaskVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XIsVIrqPending(arg1: xVIrq_t, arg2: *mut bool) -> xReturnCode_t;
}
extern "C" {
    pub fn XClearPendingVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetVIrqIndex() -> xVIrq_t;
}
extern "C" {
    pub fn XGetVIrqTimeTag(arg1: xVIrq_t, arg2: *mut xTime_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XRaiseVIrq(arg1: xVIrq_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XRouteVIrq(arg1: xVIrq_t, arg2: xVCpuSet_t) -> xReturnCode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xPctVIrqCtrl_t {
    pub pending: [xBitmapWord_t; 8usize],
    pub mask: [xBitmapWord_t; 8usize],
}
#[test]
fn bindgen_test_layout_xPctVIrqCtrl_t() {
    assert_eq!(
        ::core::mem::size_of::<xPctVIrqCtrl_t>(),
        64usize,
        concat!("Size of: ", stringify!(xPctVIrqCtrl_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xPctVIrqCtrl_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xPctVIrqCtrl_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPctVIrqCtrl_t>())).pending as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPctVIrqCtrl_t),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPctVIrqCtrl_t>())).mask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xPctVIrqCtrl_t),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSchedInfo_t {
    pub noSlot: u32,
    pub id: u32,
    pub slotDuration: u32,
}
#[test]
fn bindgen_test_layout_xSchedInfo_t() {
    assert_eq!(
        ::core::mem::size_of::<xSchedInfo_t>(),
        12usize,
        concat!("Size of: ", stringify!(xSchedInfo_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xSchedInfo_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xSchedInfo_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSchedInfo_t>())).noSlot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSchedInfo_t),
            "::",
            stringify!(noSlot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSchedInfo_t>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSchedInfo_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xSchedInfo_t>())).slotDuration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSchedInfo_t),
            "::",
            stringify!(slotDuration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xPartitionControlTable_t {
    pub vIrqCtrl: xPctVIrqCtrl_t,
    pub schedInfo: xSchedInfo_t,
}
#[test]
fn bindgen_test_layout_xPartitionControlTable_t() {
    assert_eq!(
        ::core::mem::size_of::<xPartitionControlTable_t>(),
        76usize,
        concat!("Size of: ", stringify!(xPartitionControlTable_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xPartitionControlTable_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xPartitionControlTable_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionControlTable_t>())).vIrqCtrl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionControlTable_t),
            "::",
            stringify!(vIrqCtrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionControlTable_t>())).schedInfo as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionControlTable_t),
            "::",
            stringify!(schedInfo)
        )
    );
}
extern "C" {
    pub fn XGetPct() -> *mut xPartitionControlTable_t;
}
pub type xVCpuId_t = u32;
pub type xVCpuState_t = u32;
extern "C" {
    pub fn XWaitUntilNextScheduleSlot();
}
extern "C" {
    pub fn XGetMyVCpuId() -> xVCpuId_t;
}
extern "C" {
    pub fn XResetVCpu(arg1: xVCpuId_t, arg2: xMemAddr_t) -> xReturnCode_t;
}
extern "C" {
    pub fn xHaltVCpu(arg1: xVCpuId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSuspendVCpu(arg1: xVCpuId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XResumeVCpu(arg1: xVCpuId_t) -> xReturnCode_t;
}
pub type xPartitionRestartRange_t = i64;
pub type xPartitionId_t = u32;
pub type xPartitionResetMode_t = i32;
pub type xPartitionStartCondition_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xVCpuSchedStatus_t {
    pub cSlotId: xcfSlotId_t,
    pub cSlotStart: xTime_t,
    pub cSlotDuration: xTime_t,
    pub cpuId: xCpuId_t,
}
#[test]
fn bindgen_test_layout_xVCpuSchedStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xVCpuSchedStatus_t>(),
        24usize,
        concat!("Size of: ", stringify!(xVCpuSchedStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xVCpuSchedStatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xVCpuSchedStatus_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cSlotId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cSlotId)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cSlotStart as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cSlotStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cSlotDuration as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cSlotDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xVCpuSchedStatus_t>())).cpuId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xVCpuSchedStatus_t),
            "::",
            stringify!(cpuId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xPartitionStatus_t {
    pub startCondition: xPartitionStartCondition_t,
    pub nbRestarts: xPartitionRestartRange_t,
    pub vCpuState: xVCpuState_t,
    pub vCpuSchedStatus: xVCpuSchedStatus_t,
    pub vCpusState: [xVCpuState_t; 2usize],
    pub vCpusSchedStatus: [xVCpuSchedStatus_t; 2usize],
}
#[test]
fn bindgen_test_layout_xPartitionStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xPartitionStatus_t>(),
        96usize,
        concat!("Size of: ", stringify!(xPartitionStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xPartitionStatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xPartitionStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionStatus_t>())).startCondition as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(startCondition)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPartitionStatus_t>())).nbRestarts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(nbRestarts)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpuState as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpuState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpuSchedStatus as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpuSchedStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpusState as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpusState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xPartitionStatus_t>())).vCpusSchedStatus as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xPartitionStatus_t),
            "::",
            stringify!(vCpusSchedStatus)
        )
    );
}
extern "C" {
    pub fn XGetMyPartitionId(arg1: *mut xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetPartitionId(arg1: xStringPtr_t, arg2: *mut xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XResetPartition(
        arg1: xPartitionId_t,
        arg2: xMemAddr_t,
        arg3: xPartitionResetMode_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XHaltPartition(arg1: xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetPartitionStatus(
        arg1: xPartitionId_t,
        arg2: *mut xPartitionStatus_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XSuspendPartition(arg1: xPartitionId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XResumePartition(arg1: xPartitionId_t) -> xReturnCode_t;
}
pub type xQueuingPortId_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xQueuingPortStatus_t {
    pub nbMessages: xRange_t,
}
#[test]
fn bindgen_test_layout_xQueuingPortStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xQueuingPortStatus_t>(),
        4usize,
        concat!("Size of: ", stringify!(xQueuingPortStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xQueuingPortStatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueuingPortStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xQueuingPortStatus_t>())).nbMessages as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueuingPortStatus_t),
            "::",
            stringify!(nbMessages)
        )
    );
}
extern "C" {
    pub fn XCreateQueuingPort(
        arg1: xStringPtr_t,
        arg2: xSize_t,
        arg3: xRange_t,
        arg4: xPortDirection_t,
        arg5: *mut xQueuingPortId_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XReceiveQueuingMessage(
        arg1: xQueuingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: *mut xSize_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XSendQueuingMessage(
        arg1: xQueuingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: xSize_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetQueuingPortId(arg1: xStringPtr_t, arg2: *mut xQueuingPortId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetQueuingPortStatus(
        arg1: xQueuingPortId_t,
        arg2: *mut xQueuingPortStatus_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XClearQueuingPort(arg1: xQueuingPortId_t) -> xReturnCode_t;
}
pub type xSamplingPortId_t = u32;
pub type xValidity_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSamplingPortStatus_t {
    pub refreshPeriod: xTime_t,
    pub lastMessageTimestamp: xTime_t,
    pub lastMessageSize: xSize_t,
    pub lastMessageValidity: xValidity_t,
}
#[test]
fn bindgen_test_layout_xSamplingPortStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xSamplingPortStatus_t>(),
        24usize,
        concat!("Size of: ", stringify!(xSamplingPortStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xSamplingPortStatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xSamplingPortStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).refreshPeriod as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(refreshPeriod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).lastMessageTimestamp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(lastMessageTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).lastMessageSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(lastMessageSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xSamplingPortStatus_t>())).lastMessageValidity as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xSamplingPortStatus_t),
            "::",
            stringify!(lastMessageValidity)
        )
    );
}
extern "C" {
    pub fn XCreateSamplingPort(
        arg1: xStringPtr_t,
        arg2: xSize_t,
        arg3: xPortDirection_t,
        arg4: xTime_t,
        arg5: *mut xSamplingPortId_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XWriteSamplingMessage(
        arg1: xSamplingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: xSize_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XReadSamplingMessage(
        arg1: xSamplingPortId_t,
        arg2: xMemAddrPtr_t,
        arg3: *mut xSize_t,
        arg4: *mut xValidity_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetSamplingPortId(arg1: xStringPtr_t, arg2: *mut xSamplingPortId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetSamplingPortStatus(
        arg1: xSamplingPortId_t,
        arg2: *mut xSamplingPortStatus_t,
    ) -> xReturnCode_t;
}
pub type xScheduleId_t = u32;
pub type xScheduleState_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xScheduleStatus_t {
    pub timeOfLastScheduleSwitch: xTime_t,
    pub previousSchedule: xScheduleId_t,
    pub currentSchedule: xScheduleId_t,
    pub nextSchedule: xScheduleId_t,
    pub state: xScheduleState_t,
}
#[test]
fn bindgen_test_layout_xScheduleStatus_t() {
    assert_eq!(
        ::core::mem::size_of::<xScheduleStatus_t>(),
        24usize,
        concat!("Size of: ", stringify!(xScheduleStatus_t))
    );
    assert_eq!(
        ::core::mem::align_of::<xScheduleStatus_t>(),
        4usize,
        concat!("Alignment of ", stringify!(xScheduleStatus_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xScheduleStatus_t>())).timeOfLastScheduleSwitch as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(timeOfLastScheduleSwitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xScheduleStatus_t>())).previousSchedule as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(previousSchedule)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<xScheduleStatus_t>())).currentSchedule as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(currentSchedule)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xScheduleStatus_t>())).nextSchedule as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(nextSchedule)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xScheduleStatus_t>())).state as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xScheduleStatus_t),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    pub fn XGetScheduleId(
        scheduleName: xStringPtr_t,
        scheduleId: *mut xScheduleId_t,
    ) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetScheduleStatus(status: *mut xScheduleStatus_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetSchedule(scheduleId: xScheduleId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetScheduleNow(scheduleId: xScheduleId_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetSystemTime(systemTime: *mut xTime_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XGetExecutionTime(executionTime: *mut xTime_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetSystemTimer(value: xTime_t, period: xTimeSpan_t) -> xReturnCode_t;
}
extern "C" {
    pub fn XSetExecutionTimer(value: xTime_t, period: xTimeSpan_t) -> xReturnCode_t;
}
